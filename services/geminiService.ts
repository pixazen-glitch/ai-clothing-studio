
import { GoogleGenAI, Modality, Part, GenerateContentResponse } from "@google/genai";
import { ImageFile } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function generateImage(
  productImage: ImageFile,
  prompt: string,
  styleImage: ImageFile | null,
  faceReferenceImage: ImageFile | null
): Promise<ImageFile> {
  const model = 'gemini-2.5-flash-image';

  const parts: Part[] = [
    {
      inlineData: {
        data: productImage.base64,
        mimeType: productImage.mimeType,
      },
    },
    { text: prompt },
  ];

  if (styleImage) {
    parts.push({
      inlineData: {
        data: styleImage.base64,
        mimeType: styleImage.mimeType,
      },
    });
  }
  
  if (faceReferenceImage) {
     parts.push({
      inlineData: {
        data: faceReferenceImage.base64,
        mimeType: faceReferenceImage.mimeType,
      },
    });
  }

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: { parts: parts },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        return {
          base64: part.inlineData.data,
          mimeType: part.inlineData.mimeType,
          name: 'generated-image.png',
        };
      }
    }
    
    // Check for safety ratings or blocks if no image is returned
    const safetyText = response.candidates?.[0]?.finishReason;
    if (safetyText) {
        throw new Error(`Image generation failed due to safety settings: ${safetyText}`);
    }

    throw new Error('No image was generated by the model.');

  } catch (error) {
    console.error('Error calling Gemini API:', error);
    throw new Error('Failed to generate image. Please check your prompt or API key.');
  }
}

export async function analyzeStyleImage(styleImage: ImageFile): Promise<string> {
  const model = 'gemini-2.5-flash';
  
  const imagePart = {
    inlineData: {
      data: styleImage.base64,
      mimeType: styleImage.mimeType,
    },
  };
  
  const textPart = {
    text: "Analyze this image and describe its aesthetic, color palette, and mood in a concise phrase suitable for a prompt. For example: 'A vibrant, high-contrast style with bold neon colors and a futuristic mood.'",
  };

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: model,
      contents: { parts: [imagePart, textPart] },
    });
    
    if(!response.text) {
      // Check for safety ratings or blocks if no text is returned
      const safetyText = response.candidates?.[0]?.finishReason;
      if (safetyText && safetyText !== 'STOP') {
          throw new Error(`Style analysis failed due to safety settings: ${safetyText}`);
      }
      throw new Error('Model returned no text for style analysis.');
    }
    
    return response.text.trim();

  } catch (error) {
    console.error('Error analyzing style image:', error);
    throw new Error('Failed to analyze style image.');
  }
}
